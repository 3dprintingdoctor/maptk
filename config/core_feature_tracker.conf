# Algorithm to use for 'feature_tracker', which is of type 'track_features'.
# Must be one of the following options:
# 	- core
type = core

block core

  block feature_detector
    # Algorithm to use for 'feature_detector', which is of type 'detect_features'.
    # Must be one of the following options:
    # 	- ocv
    type = ocv

    # The OpenCV cv::Algorithm type to use for 'detector'.
    ocv:detector:type = Feature2D.SURF

    # Parameters for the OpenCV SURF detector
    ocv:detector:Feature2D.SURF:extended = false
    ocv:detector:Feature2D.SURF:hessianThreshold = 1000
    ocv:detector:Feature2D.SURF:nOctaveLayers = 3
    ocv:detector:Feature2D.SURF:nOctaves = 4
    ocv:detector:Feature2D.SURF:upright = true
  endblock # feature_detector


  block descriptor_extractor
    # Algorithm to use for 'descriptor_extractor', which is of type
    # 'extract_descriptors'.
    # Must be one of the following options:
    # 	- ocv
    type = ocv

    # The OpenCV cv::Algorithm type to use for 'extractor'.
    ocv:extractor:type = Feature2D.SURF

    # Parameters for the OpenCV SURF descriptor
    ocv:extractor:Feature2D.SURF:extended = false
    ocv:extractor:Feature2D.SURF:hessianThreshold = 1000
    ocv:extractor:Feature2D.SURF:nOctaveLayers = 3
    ocv:extractor:Feature2D.SURF:nOctaves = 4
    ocv:extractor:Feature2D.SURF:upright = true
  endblock # descriptor_extractor


  block feature_matcher
    # Algorithm to use for 'feature_matcher', which is of type 'match_features'.
    # Must be one of the following options:
    # 	- homography_guided
    # 	- ocv
    # 	- vxl_constrained
    type = homography_guided

    # The OpenCV cv::Algorithm type to use for 'matcher'.
    homography_guided:feature_matcher1:ocv:matcher:type = DescriptorMatcher.FlannBasedMatcher

    # Algorithm to use for 'feature_matcher1', which is of type 'match_features'.
    # Must be one of the following options:
    # 	- homography_guided
    # 	- ocv
    # 	- vxl_constrained
    homography_guided:feature_matcher1:type = ocv

    # Algorithm to use for 'feature_matcher2', which is of type 'match_features'.
    # Must be one of the following options:
    # 	- homography_guided
    # 	- ocv
    # 	- vxl_constrained
    homography_guided:feature_matcher2:type =

    # Algorithm to use for 'filter_features', which is of type 'filter_features'.
    # Must be one of the following options:
    # 	- magnitude
    homography_guided:filter_features:type =

    # Algorithm to use for 'homography_estimator', which is of type
    # 'estimate_homography'.
    # Must be one of the following options:
    # 	- ocv
    # 	- vxl
    homography_guided:homography_estimator:type = vxl

    # The acceptable error distance (in pixels) between warped and measured points
    # to be considered an inlier match.
    homography_guided:inlier_scale = 10

    # The minimum required inlier point count. If there are less than this many
    # inliers, no matches will be output.
    homography_guided:min_required_inlier_count = 0

    # The minimum required percentage of inlier points. If the percentage of points
    # considered inliers is less than this amount, no matches will be output.
    homography_guided:min_required_inlier_percent = 0
  endblock # feature_matcher


  block loop_closer
    # Algorithm to use for 'loop_closer', which is of type 'close_loops'.
    # Must be one of the following options:
    # 	- bad_frames_only :: Attempts short-term loop closure based on percentage of
    # feature points tracked.
    # 	- multi_method :: Iteratively run multiple loop closure algorithms
    # 	- vxl_homography_guided
    type = multi_method

    # Number of close loops methods we want to use.
    multi_method:count = 2

    block multi_method:method1
      include loop_closer_bad_frames.conf
    endblock

    block multi_method:method2
      include loop_closer_homography.conf
    endblock
  endblock # loop_closer

endblock # core
