MAPTK v0.2.0 Release Notes
==========================

This is a minor release MAPTK that provides both new functionality and fixes
over the previous v0.1.2 release.


Updates since v0.1.2
--------------------

Core

 * Applied the "abstract base class, templated derived class" pattern to the
   camera class.  The same pattern had been used for features and landmarks.
   It allows a camera to be implemented in either double or float but
   maintain a type-agnostic interface through a common base class.

 * Added type conversion for rotation, camera, and camera_intrinsics
   (e.g. cast rotation_<double> to rotation_<float>).

 * Added a look_at() member function to the camera_ class to set the camera
   rotation such that the camera looks at a specified point and has an up
   direction aligned with the specified scene up direction.
   Unit tests provided.

 * Added map() and unmap() member functions to camera_intrinsics to apply
   and undo the camera intrinsic mapping as 2D-2D transformation.  Also can
   map 3D points in normalized camera coordinates to 2D image coordinates.
   Unit tests provided.

 * Added project() member function to the camera_ class project 3D points to
   2D image points by applying both extrinsic and intrinsic parameters.
   Unit tests provided.

 * Added a magnitude(), magnitude_sqr() members and normalized() function for
   the vector class.

 * Added a vector_<T> constructor from a raw array of data (const T*)

 * Added a matrix_<T> member functions to set and extract rows and columns.

 * Added a matrix_<T> member function to update a sub-matrix.

 * Implemented the input and output stream operator for the rotation class.

 * Added == and != operators to the rotation class.

 * Added constructors and accessor functions to convert rotations to and
   from axis/angle representation and the related Rodrigues vector
   representation.  Unit tests provided.

 * Added a track ID member to the track class.

 * Added landmark_map abstract container class to hold mappings between
   track/landmark IDs and landmark objects.  Also provided a default
   implementation using std::map.

 * Added camera_map abstract container class to hold mappings between frame
   numbers and camera objects.  Also provided a default implementation
   using std::map.

 * Added a bundle adjustment abstract algorithm that take a camera_map,
   a landmark_map, and a track_set and returns optimized versions of the
   camera_map and landmark_map.

 * Added metrics for computing reprojection errors on SBA results.
   Currently support is Root-Mean-Square-Error (RMSE) of reprojections.

 * Added key description in maptk::config_block.

 * Added output of key descriptions as comments in configuration file output.

 * Added use of config_block key descriptions to nested algorithm utilities
   and track_features utility.

 * Added functions for reading and writing track files. Updated tools
   to use these functions.

 * Added explicit functions for reading and writing POS files (ins_data).
   Updated tools to use these functions.

 * Added explicit functions for reading and writing cameras in KRTD files.
   Also provided camera base class operator<< to support this.

 * Added a function to write a landmark map in PLY file format.

 * Added functions for batch initialization of cameras with INS data and
   batch updating of INS data using cameras.

 * Added helper functions to track_set to return the set of all track IDs
   and all frame IDs contained in the tracks in the set.

 * Added a tool to run sparse bundle adjustment on tracks read from a file.

VXL

 * Added conversions between maptk::camera_<T> and vpgl_perspective_camera<T>

 * Added vxl::camera_map to implement the maptk::camera_map container using
   a map of vpgl_perspective_camera<double> internally.

 * Added vxl::bundle_adjust to implement to maptk::algo::bundle_adjust using
   vpgl_bundle_adjust from VXL.

OpenCV

 * Added ability to configure nested, and recursively nested OpenCV
   cv::Algorithm instances.


Fixes since v0.1.2
------------------

Core

 * Fixed typo in variable name in camera_ constructor (intrincs --> intrinsics)

 * Fixed landmark inheritance: landmark_<T> is now derived from landmark.

 * Fixed invalid doxygen syntax in rotation.h

 * Rotation constructor from quaternion vector is now explicit to avoid
   accidental casting.

 * update_camera() and update_ins_data() functions of local_geo_cs are now const
   as they should have been.

 * Set ins_data source_name to be MAPTK in defualt constructor and update
   functions to avoid writing out unnamed POS files.

 * Removed CLIF hack in rotation yaw-pitch-roll constructor.

 * Fixed rotation_::get_yaw_pitch_roll() function to work symmetrically
   with the related constructor.  Added tests to verify.

 * Added std::skipws in operator>> for vector_ and matrix_ to allow used in
   boost::lexical_cast, which is used by the config file parser.
