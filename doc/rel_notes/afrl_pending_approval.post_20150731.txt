MAPTK Release Notes for changes pending release approval by AFRL
================================================================

This file documents release notes for changes made to MAPTK which require
public release approval from AFRL.  After approval, the changes and
corresponding notes below will be encorporated into a public numbered
release version, and the content of this file will be reset.


Updates since last public release
---------------------------------

Main Library

 * Added a function in match_matrix.h to compute the symmetric match matrix
   corresponding to a track set for all or a subset of the frames.

 * Renamed the algorithm base class clone() method to base_clone() and added
   a new clone() method at the algorithm_impl level.  These functions are
   identical except the base_clone() method returns a base class algorithm
   shared pointer and the clone() method returns a shared pointer to the
   specific algorithm intermediate base class.

 * Added a Necker reverse tranformation to transform.h to help get out
   of a common local minima during bundle adjustment.

 * Changed the camera and camera_intrinsic classes to act as higher level
   containers.  Each now has an abstract base class and a "simple" concrete
   class.  The templated derived classes (e.g. camera_<T>) have been removed.
   The simple classes use the double type internally.

 * Changed the camera to contain a shared pointer to a camera_intrinsics
   object rather than an instance.  This allows cameras to share common
   intrinsics.

 * Moved some common functions like project() and depth() into the camera
   base class to allow usage without down-casting.

Ceres Plugin

 * Added an option to the bundle adjust algorithm to control how camera
   intrinsics are shared across cameras.  The default auto sharing mode
   optimizes a seperate set of intrinsics for each camera_intrinsics object
   shared amongst the cameras.  Additional options allow forcing each camera
   to have its own independent intrinsics and forcing all cameras share
   one common set of intrinsics.

Tools

 * Added a new tool to read in a track file and compute the match matrix.
   The match matrix can be written out to a matrix in ASCII form.

 * Added an option to the bundle adjust tool to write out an updated track
   file corresponding to the filtered tracks used in bundle adjustment.

 * Added an option to the bundle adjust tool to apply a Necker reversal
   to the input cameras and points before continuing to apply bundle
   adjustment.  This allows an inverted solution from a previous run to
   be restarted to find the correct solution.

 * Change bundle adjustment tool to allow frame subsampling to occur before
   camera initialization.  This way one can limited the entire pipeline,
   not just bundle adjustment, to a subset of frames.

 * Added an option to the bundle adjust tool to allow initialization of
   additional cameras beyond those that were loaded from disk.  If you have
   a solution on a subset of frames you may wish to further optimize just
   that subset or your may wish to use that subset to bootstrap to a
   larger set of frames.

Scripts

 * Added a Python script to read the ASCII match matrix file produced by
   the match matrix tool and plot it.

 * Added Python modules to read and write KRTD and PLY files.

 * Added a Python script to read an NVM file from VisualSfM and write out
   KRTD camera files

 * Added a Python script to read in a PLY file and set of KRTD camera files
   and write out a homography files.  This script fits a ground plane to
   the points in the PLY and then uses the cameras to derive homographies
   from each frame back to the first frame as induced by the plane.


Fixes since last public release
-------------------------------
