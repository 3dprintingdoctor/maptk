# include the parameters for the video_reader
block video_reader
  include core_video_input_image_list.conf
endblock

#  Path to an input file to be opened as a video. This could be either a video
#  file or a text file containing new-line separated paths to sequential image
#  files.
video_source = frame_list.txt


#  Algorithm to use for 'convert_image'.
#  Must be one of the following options:
#  	- bypass :: Performs no conversion and returns the given image container.
convert_image:type = bypass


#  A majority of the time, mask images are a single channel, however it is
#
#  feasibly possible that certain implementations may use multi-channel masks.
#  If this is true we will expect multiple-channel mask images, warning when a
#  single-channel mask is provided. If this is false we error upon seeing a
#  multi-channel mask image.
expect_multichannel_masks = false

#  If true, all mask images will be inverted after loading. This is useful if
#  mask images read in use positive values to indicated masked areas instead of
#  non-masked areas.
invert_masks = false

#  Optional path to an input file containing new-line separated paths to mask
#  images. This list should be parallel in association to files specified in
#  ``image_list_file``. Mask image must be the same size as the image they are
#  associated with.
#
#  Leave this blank if no image masking is desired.
mask_list_file =

#  Algorithm to use for 'image_reader'.
#  Must be one of the following options:
#  	- ocv :: Read and write image using OpenCV.
#  	- vxl :: Use VXL (vil) to load and save image files.
image_reader:type = ocv


# Configuration for the feature detector
block feature_detector
  include ocv_feature_detector.conf
endblock

# Configuration for the descriptor extractor
block descriptor_extractor
  include ocv_descriptor_extractor.conf
endblock


#  Algorithm to use for 'fd_io'.
#  Must be one of the following options:
#  	- core :: Read and write features and descriptor to binary files using
#  Cereal serialization.
fd_io:type = core

#  Path to a directory in which to write the output feature detection and
#  description files
features_dir = results/features

#  When a features file already exists, validate that the file can load
#  sucessfully before deciding to skip computation on this frame.  If this
#  option is disabled then skip if the file exists, without loading it
validate_existing_features = true
