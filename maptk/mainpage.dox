/// Primary namespace under which the contents of the MAP-Tk package are located
namespace maptk {
// The following text is included in the main documentation page by doxygen
/** \mainpage Core Library
\section sec-core-contents Contents
The MAP-Tk core library provides various components

\subsection sec-core-math Mathematical Structures
Eigen3 is a required dependency of MAP-Tk and provides a majority of vector and
matrix functionality in MAP-Tk.

- \link covariance_ covariance_<N,T> \endlink : an NxN symmetric positive
               definite matrix of type T to represent a covariance matrix
- \link rotation_ rotation_<T> \endlink : a representation of 3D rotation
               with conversion to various formats (matrix, quaternion, etc.)
- homography : an alias for an 3x3 Eigen::Matrix and
               represents a homogeneous transformation matrix

\subsection sec-core-image Image Structures
- \ref image : a representation of an 8-bit image with memory that could be
               shared between other image representations

\subsection sec-core-geometry Geometric Structures
- \ref feature : a 2D image interest point
- \ref landmark : a 3D location corresponding to a tracked feature
- \ref descriptor : a vector data used to describe the appearance of a \ref feature
- \ref track : a sequence of corresponding features and descriptors over time.
- \ref camera : a pinhole camera object of type T with
               \link rotation_ rotation \endlink, translation, and intrinsics
- \link camera_intrinsics_ camera_intrinsics_<T> \endlink : pinhole camera
               intrinics parameters focal length, principal point, skew, and
               aspect ratio


\subsection sec_geographic Geographic Data Structures
- \ref ins_data : a representataion of Inertial Navigation Data (INS), such as
               loaded from POS file.
- \ref local_geo_cs : a representation of a local geographic coordinate system.
               A Cartesian coordinate system in meters with an origin in UTM.


\subsection sec-core-config Configuration Structures
- \ref algorithm_plugin_manager : Manages loading dynamic plugin libraries
               and registering algorithm implementations they provide.
- \ref config_block : a representation of a tree of nested algorithm parameters.
               Read from and write to a config file.
- \ref registrar : manages registered instances of objects by name.
               Used to create algorithms by string name.


\subsection sec-core-containers Abstract Containers
These abstract base classes provide APIs for objects passed between algorithms.
Each class also comes with a concrete "simple" derived class that implements
the interface in the trivial way, by directly storing the underlying MAP-Tk data
types.  Other modules can provide alternate implementations to store data in
other representations, or even on other devices (e.g. GPU memory).  However,
each container must implement the function to convert to canonical MAP-Tk data
types.
- \ref image_container : holds an \ref image, default implementation is
               \ref simple_image_container
- \ref feature_set : holds a collection of \ref feature shared pointers,
               default implementation is \ref simple_feature_set
- \ref descriptor_set : holds a collection of \ref descriptor shared pointers,
               default implementation is \ref simple_descriptor_set
- \ref match_set : holds a collection of pairs of matching feature indices,
               default implementation is \ref simple_match_set
- \ref track_set : holds a collection of feature \ref track shared pointers,
               default implementation is \ref simple_track_set
- \ref landmark_map : hold a mapping from \ref landmark_id_t to \ref landmark
               shared pointers, default implementation is
               \ref simple_landmark_map
- \ref camera_map : hold a mapping from \ref frame_id_t to \ref camera
               shared pointers, default implementation is
               \ref simple_camera_map


\subsection sec-core-algorithms Abstract Algorithms
- \ref algo::algorithm : the base class for all algorithms
- \ref algo::algorithm_def : the base class for abstract algorithm definitions
- \ref algo::algorithm_impl : the base class for concrete algorithm
               implementations
- \ref algo::analyze_tracks : output various statistics about feature track sets
- \ref algo::bundle_adjust : optimize collections of cameras and landmarks to
               minimize reprojection error relative to observed tracks.
- \ref algo::close_loops : close loops by stitching corresponding feature tracks
               together
- \ref algo::compute_ref_homography : estimate homography transformations between
               each input frame and some past reference frame
- \ref algo::convert_image : convert the base image type into another form
- \ref algo::detect_features : detect feature points in an image
- \ref algo::draw_tracks : draw feature tracks on top of input images
- \ref algo::estimate_essential_matrix : estimate essential matrix from
               matching 2D points
- \ref algo::estimate_homography : estimate a homography from feature matches
- \ref algo::estimate_similarity_transform : estimate a similarity
               transformation from corresponding point sets.
- \ref algo::extract_descriptors : extract a descriptor for each feature from
               an image
- \ref algo::filter_features : filter the a set features to make a reduced set
- \ref algo::geo_map : convert geographic coordinates between Lat-Long and UTM
- \ref algo::image_io : read or write an image file
- \ref algo::initialize_cameras_landmarks : initialize cameras and landmarks
               given a set of tracks
- \ref algo::match_features : match features between two images
- \ref algo::optimize_cameras : optimize camera parameters given a set of
               landmarks and tracks
- \ref algo::track_features : combine sequences of feature matches over time
               into tracks
- \ref algo::triangulate_landmarks : triangulate landmark locations given a set
               of cameras and tracks

\section sec-core-plugins Plugins
MAP-Tk provides several optional built-in plug-ins

- \link plugin_core Core plugin \endlink : provides basic algorithm
               implementations that require no other dependencies
- \link plugin_ocv OpenCV plugin \endlink : provides algorithms that build on
               OpenCV algorithms and data structures.
- \link plugin_proj PROJ plugin \endlink : provides algorithms that build on
               PROJ algorithms and data structures.
- \link plugin_vcl VisCL plugin \endlink : provides algorithms that build on
               VisCL algorithms and data structures.
- \link plugin_vxl VXL plugin \endlink : provides algorithms that build on
               VXL algorithms and data structures.

*/
}
